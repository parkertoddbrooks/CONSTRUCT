#!/bin/bash

# Simple Context Updater for CLAUDE.md
# More robust approach using temporary files

CONTEXT_FILE="/Users/parker/Documents/dev/claude-engineer/_Projects/RUN/xcode/RUN/CLAUDE.md"
PROJECT_ROOT="/Users/parker/Documents/dev/claude-engineer/_Projects/RUN/xcode/RUN"
TEMP_DIR=$(mktemp -d)

# Backup before updating
cp "$CONTEXT_FILE" "${CONTEXT_FILE}.backup-$(date +%Y%m%d-%H%M%S)"

# Generate sections in separate files
generate_structure() {
    cat > "$TEMP_DIR/structure.txt" <<'EOF'
## 📊 Current Project State (Auto-Updated)
EOF
    echo "Last updated: $(date '+%Y-%m-%d %H:%M:%S')" >> "$TEMP_DIR/structure.txt"
    
    # Count components
    local viewmodels=$(find "$PROJECT_ROOT/RUN-iOS" -name "*ViewModel*.swift" -type f | grep -v "build/" | wc -l | tr -d ' ')
    local services=$(find "$PROJECT_ROOT/RUN-iOS" -name "*Service*.swift" -type f | grep -v "build/" | wc -l | tr -d ' ')
    local tokens=$(find "$PROJECT_ROOT/RUN-iOS" -name "*Tokens*.swift" -type f | grep -v "build/" | wc -l | tr -d ' ')
    local components=$(find "$PROJECT_ROOT/RUN-iOS/RUN-iOS/Shared/Components" -name "*.swift" -type f 2>/dev/null | wc -l | tr -d ' ')
    
    cat >> "$TEMP_DIR/structure.txt" <<EOF

### Active Components
- ViewModels: $viewmodels
- Services: $services  
- Design Tokens: $tokens
- Shared Components: $components

### Available Resources

#### 🎨 Design System
EOF
    
    # Check design system files
    if [ -f "$PROJECT_ROOT/RUN-iOS/RUN-iOS/Shared/Utilities/Colors.swift" ]; then
        echo "- ✅ AppColors available" >> "$TEMP_DIR/structure.txt"
    fi
    if [ -f "$PROJECT_ROOT/RUN-iOS/RUN-iOS/Shared/Utilities/Spacing.swift" ]; then
        echo "- ✅ Spacing.small/medium/large" >> "$TEMP_DIR/structure.txt"
    fi
    if [ -f "$PROJECT_ROOT/RUN-iOS/RUN-iOS/Shared/Utilities/Typography.swift" ]; then
        echo "- ✅ Font system available" >> "$TEMP_DIR/structure.txt"
    fi
    
    echo "" >> "$TEMP_DIR/structure.txt"
    echo "#### 🧩 Shared Components" >> "$TEMP_DIR/structure.txt"
    find "$PROJECT_ROOT/RUN-iOS/RUN-iOS/Shared/Components" -name "*.swift" -type f 2>/dev/null | while read -r file; do
        echo "- $(basename "$file" .swift)" >> "$TEMP_DIR/structure.txt"
    done | sort
}

generate_violations() {
    cat > "$TEMP_DIR/violations.txt" <<'EOF'
## ⚠️ Active Violations (Auto-Updated)

EOF
    
    # Check for hardcoded values
    echo "### Hardcoded Values" >> "$TEMP_DIR/violations.txt"
    if grep -r "CGFloat.*= [0-9]\|\.frame.*[0-9]" "$PROJECT_ROOT/RUN-iOS" --include="*.swift" 2>/dev/null | grep -v "Tokens\|tokens" | head -3 > "$TEMP_DIR/hardcoded.txt"; then
        if [ -s "$TEMP_DIR/hardcoded.txt" ]; then
            cat "$TEMP_DIR/hardcoded.txt" >> "$TEMP_DIR/violations.txt"
        else
            echo "✅ None found" >> "$TEMP_DIR/violations.txt"
        fi
    else
        echo "✅ None found" >> "$TEMP_DIR/violations.txt"
    fi
}

generate_location() {
    cat > "$TEMP_DIR/location.txt" <<'EOF'
## 📍 Current Working Location (Auto-Updated)

### Recently Modified Files
EOF
    
    find "$PROJECT_ROOT/RUN-iOS" -name "*.swift" -type f -mtime -1 2>/dev/null | grep -v "build/" | head -5 | while read -r file; do
        echo "- ${file#$PROJECT_ROOT/}" >> "$TEMP_DIR/location.txt"
    done
    
    echo "" >> "$TEMP_DIR/location.txt"
    echo "### Git Status" >> "$TEMP_DIR/location.txt"
    echo '```' >> "$TEMP_DIR/location.txt"
    cd "$PROJECT_ROOT" && git status --short | head -5 >> "$TEMP_DIR/location.txt"
    echo '```' >> "$TEMP_DIR/location.txt"
}

# Replace sections using perl (more reliable than awk for multiline)
replace_section() {
    local start_marker="$1"
    local end_marker="$2"
    local content_file="$3"
    
    perl -i -pe "
        if (/\Q$start_marker\E/../\Q$end_marker\E/) {
            if (/\Q$start_marker\E/) {
                print;
                open(FH, '<', '$content_file');
                while(<FH>) { print }
                close(FH);
            }
            \$_ = '' unless /\Q$end_marker\E/;
        }
    " "$CONTEXT_FILE"
}

# Generate all sections
echo "🔄 Updating CLAUDE.md..."
generate_structure
generate_violations  
generate_location

# Replace sections
replace_section "<!-- START:CURRENT-STRUCTURE -->" "<!-- END:CURRENT-STRUCTURE -->" "$TEMP_DIR/structure.txt"
replace_section "<!-- START:VIOLATIONS -->" "<!-- END:VIOLATIONS -->" "$TEMP_DIR/violations.txt"
replace_section "<!-- START:WORKING-LOCATION -->" "<!-- END:WORKING-LOCATION -->" "$TEMP_DIR/location.txt"

# Cleanup
rm -rf "$TEMP_DIR"

echo "✅ CLAUDE.md updated successfully!"