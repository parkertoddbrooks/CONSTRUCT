#!/bin/bash

# init-construct.sh - Enhances CLAUDE.md with CONSTRUCT patterns
# This is Stage 2 of the two-stage initialization process
# Stage 1: User runs /init (creates standard CLAUDE.md)
# Stage 2: User runs this script (enhances with patterns)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONSTRUCT_ROOT="$(cd "$SCRIPT_DIR/../../../.." && pwd)"
CONSTRUCT_CORE="$CONSTRUCT_ROOT/CONSTRUCT-CORE"

# Source library functions
source "$CONSTRUCT_CORE/CONSTRUCT/lib/common-patterns.sh" 2>/dev/null || true
source "$CONSTRUCT_CORE/CONSTRUCT/lib/validation.sh" 2>/dev/null || true

echo -e "${BLUE}🚀 CONSTRUCT Pattern Enhancement${NC}"
echo -e "${BLUE}================================${NC}"

# Function to display help
show_help() {
    echo "Usage: $0 [options] [language]"
    echo ""
    echo "Enhances CLAUDE.md with CONSTRUCT patterns after /init"
    echo ""
    echo "Options:"
    echo "  --regenerate    Regenerate CLAUDE.md from patterns"
    echo "  --include-parent Include parent directory patterns (for multi-repo)"
    echo "  --dry-run       Show what would be done without making changes"
    echo "  -h, --help      Show this help message"
    echo ""
    echo "Language (optional):"
    echo "  python, swift, typescript, etc."
    echo "  If provided, adds language-specific patterns"
    echo ""
    echo "Examples:"
    echo "  $0                    # Enhance with project patterns"
    echo "  $0 python             # Add Python patterns"
    echo "  $0 --regenerate       # Regenerate from current patterns"
    echo "  $0 --include-parent   # Include shared patterns from parent"
}

# Parse command line arguments
REGENERATE=false
INCLUDE_PARENT=false
DRY_RUN=false
LANGUAGE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --regenerate)
            REGENERATE=true
            shift
            ;;
        --include-parent)
            INCLUDE_PARENT=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            # Assume it's a language
            LANGUAGE="$1"
            shift
            ;;
    esac
done

# Detect project root (where .git is)
PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$PROJECT_ROOT"

echo -e "${BLUE}📍 Project root: $PROJECT_ROOT${NC}"

# Check if CLAUDE.md exists
if [ ! -f "CLAUDE.md" ]; then
    echo -e "${RED}❌ CLAUDE.md not found!${NC}"
    echo -e "${YELLOW}Please run '/init' first to create the base CLAUDE.md${NC}"
    exit 1
fi

# Check if this is CONSTRUCT itself
IS_CONSTRUCT=false
if [ -d "$PROJECT_ROOT/CONSTRUCT-CORE" ] && [ -d "$PROJECT_ROOT/CONSTRUCT-LAB" ]; then
    IS_CONSTRUCT=true
    echo -e "${GREEN}✅ Detected CONSTRUCT repository${NC}"
fi

# Find or create .construct directory
CONSTRUCT_DIR="$PROJECT_ROOT/.construct"
if [ ! -d "$CONSTRUCT_DIR" ]; then
    echo -e "${YELLOW}Creating .construct directory...${NC}"
    mkdir -p "$CONSTRUCT_DIR"
fi

# Find or create patterns.yaml
PATTERNS_FILE="$CONSTRUCT_DIR/patterns.yaml"
if [ ! -f "$PATTERNS_FILE" ]; then
    echo -e "${YELLOW}Creating patterns.yaml...${NC}"
    
    # Detect language if not provided
    if [ -z "$LANGUAGE" ]; then
        if [ -f "*.swift" ] || [ -f "Package.swift" ]; then
            LANGUAGE="swift"
        elif [ -f "*.py" ] || [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            LANGUAGE="python"
        elif [ -f "*.ts" ] || [ -f "package.json" ]; then
            LANGUAGE="typescript"
        fi
    fi
    
    # Create appropriate patterns.yaml
    if [ "$IS_CONSTRUCT" = true ]; then
        # CONSTRUCT uses construct-dev patterns
        cat > "$PATTERNS_FILE" << 'EOF'
# CONSTRUCT Framework Pattern Configuration
# This configures the patterns used by CONSTRUCT itself

# Languages used in CONSTRUCT development
languages: ["bash", "python"]

# Active pattern plugins
plugins:
  - tooling/construct-dev      # CONSTRUCT-specific development patterns
  - tooling/shell-scripting    # Shell script best practices
  - tooling/unix-philosophy    # Unix design principles
  - documentation/living       # Self-updating documentation

# Custom rules for CONSTRUCT framework
custom_rules:
  scripts:
    - "All scripts must have help output with --help"
    - "Scripts must support interactive mode detection"
    - "Use absolute paths from CONSTRUCT_CORE root"
    - "Exit codes must be meaningful (0=success, >0=errors)"
EOF
    else
        # Regular project patterns
        cat > "$PATTERNS_FILE" << EOF
# Project Pattern Configuration
# Generated by construct init

# Primary language
languages: ["${LANGUAGE:-bash}"]

# Active pattern plugins
plugins:
EOF
        
        # Add language-specific plugins
        if [ -n "$LANGUAGE" ]; then
            case "$LANGUAGE" in
                swift)
                    echo "  - languages/swift" >> "$PATTERNS_FILE"
                    echo "  - architecture/mvvm" >> "$PATTERNS_FILE"
                    echo "  - platform/ios" >> "$PATTERNS_FILE"
                    ;;
                python)
                    echo "  - languages/python" >> "$PATTERNS_FILE"
                    echo "  - testing/pytest" >> "$PATTERNS_FILE"
                    ;;
                typescript)
                    echo "  - languages/typescript" >> "$PATTERNS_FILE"
                    echo "  - testing/jest" >> "$PATTERNS_FILE"
                    ;;
            esac
        fi
        
        cat >> "$PATTERNS_FILE" << 'EOF'

# Custom rules specific to this project
custom_rules: {}

# Include configurations
includes: []

# Overrides for specific files/directories
overrides: []
EOF
    fi
    
    echo -e "${GREEN}✅ Created patterns.yaml${NC}"
fi

# Check for parent patterns if requested
PARENT_PATTERNS=""
if [ "$INCLUDE_PARENT" = true ]; then
    PARENT_DIR="$(dirname "$PROJECT_ROOT")"
    PARENT_PATTERNS_FILE="$PARENT_DIR/.construct/patterns.yaml"
    if [ -f "$PARENT_PATTERNS_FILE" ]; then
        echo -e "${GREEN}✅ Found parent patterns at: $PARENT_PATTERNS_FILE${NC}"
        PARENT_PATTERNS="$PARENT_PATTERNS_FILE"
    fi
fi

# Backup current CLAUDE.md
if [ "$DRY_RUN" = false ]; then
    cp CLAUDE.md CLAUDE.md.backup
    echo -e "${GREEN}✅ Backed up current CLAUDE.md${NC}"
fi

# Load CLAUDE-BASE.md template
CLAUDE_BASE="$CONSTRUCT_CORE/CLAUDE-BASE.md"
if [ ! -f "$CLAUDE_BASE" ]; then
    echo -e "${RED}❌ CLAUDE-BASE.md not found at: $CLAUDE_BASE${NC}"
    exit 1
fi

echo -e "${BLUE}🔄 Enhancing CLAUDE.md with patterns...${NC}"

# Create enhanced CLAUDE.md
if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}DRY RUN: Would enhance CLAUDE.md with:${NC}"
    echo "  - Base template from CLAUDE-BASE.md"
    echo "  - Patterns from: $PATTERNS_FILE"
    [ -n "$PARENT_PATTERNS" ] && echo "  - Parent patterns from: $PARENT_PATTERNS"
    echo "  - Dynamic sections for context"
else
    # For now, just add a marker showing enhancement
    # TODO: Implement full pattern injection system
    
    # Read current CLAUDE.md
    CURRENT_CONTENT=$(cat CLAUDE.md)
    
    # Check if already enhanced
    if grep -q "CONSTRUCT Enhanced" CLAUDE.md; then
        echo -e "${YELLOW}⚠️  CLAUDE.md already enhanced. Use --regenerate to update.${NC}"
        if [ "$REGENERATE" = false ]; then
            exit 0
        fi
    fi
    
    # Function to collect injection content from patterns
    collect_injection_content() {
        local injection_point="$1"
        local content=""
        
        # Read patterns from patterns.yaml
        local plugins=$(grep -E "^  - " "$PATTERNS_FILE" | sed 's/^  - //' | sed 's/#.*//' | xargs)
        
        for plugin in $plugins; do
            local plugin_path="$CONSTRUCT_CORE/patterns/plugins/$plugin"
            local injection_file=""
            
            case "$injection_point" in
                "GUIDELINES")
                    injection_file="$plugin_path/injections/guidelines.md"
                    ;;
                "EXAMPLES")
                    injection_file="$plugin_path/injections/examples.md"
                    ;;
                "COMMANDS")
                    injection_file="$plugin_path/injections/commands.md"
                    ;;
                "AI_GUIDANCE")
                    injection_file="$plugin_path/injections/ai-guidance.md"
                    ;;
                "VALIDATED_DISCOVERIES")
                    injection_file="$plugin_path/injections/validated-discoveries.md"
                    ;;
            esac
            
            if [ -f "$injection_file" ]; then
                if [ -n "$content" ]; then
                    content="$content"$'\n\n'
                fi
                content="$content$(cat "$injection_file")"
            fi
        done
        
        echo "$content"
    }
    
    # Process CLAUDE-BASE.md and inject pattern content
    process_base_template() {
        local base_content=$(cat "$CLAUDE_BASE")
        
        # Replace {{CONSTRUCT:HEADER}} with project info
        local header="# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository."
        base_content="${base_content/\{\{CONSTRUCT:HEADER\}\}/$header}"
        
        # Replace {{CONSTRUCT:PATTERNS}} with active patterns
        local patterns_content="### Active Patterns
\`\`\`yaml
$(cat "$PATTERNS_FILE")
\`\`\`"
        base_content="${base_content/\{\{CONSTRUCT:PATTERNS\}\}/$patterns_content}"
        
        # Collect and inject content for each injection point
        for point in GUIDELINES EXAMPLES COMMANDS AI_GUIDANCE; do
            local content=$(collect_injection_content "$point")
            
            # Special handling for GUIDELINES - also include validated discoveries
            if [ "$point" = "GUIDELINES" ]; then
                local discoveries=$(collect_injection_content "VALIDATED_DISCOVERIES")
                if [ -n "$discoveries" ]; then
                    if [ -n "$content" ]; then
                        content="$content"$'\n\n'"$discoveries"
                    else
                        content="$discoveries"
                    fi
                fi
            fi
            
            if [ -n "$content" ]; then
                base_content="${base_content/\{\{CONSTRUCT:$point\}\}/$content}"
            else
                # Remove empty injection points
                base_content="${base_content/\{\{CONSTRUCT:$point\}\}/}"
            fi
        done
        
        # Handle {{CONSTRUCT:STRUCTURE}} - project structure
        local structure_content=""
        if [ "$IS_CONSTRUCT" = true ]; then
            structure_content="### Repository Structure
\`\`\`
CONSTRUCT/
├── CONSTRUCT-CORE/        # Stable framework components
│   ├── CONSTRUCT/         # Main framework code
│   │   ├── scripts/       # Executable scripts (by category)
│   │   ├── lib/           # Shared functions
│   │   └── config/        # Configuration
│   ├── patterns/plugins/  # Pattern plugin system
│   └── TEMPLATES/         # Project templates
├── CONSTRUCT-LAB/         # Experimental development
└── Projects/              # Git-independent managed projects
\`\`\`"
        else
            # For regular projects, use project-specific structure
            structure_content="### Project Structure
See \`.construct/structure.md\` for project layout."
        fi
        base_content="${base_content/\{\{CONSTRUCT:STRUCTURE\}\}/$structure_content}"
        
        # Handle {{CONSTRUCT:CONTEXT}} - add all dynamic sections
        local context_content="<!-- Dynamic sections updated by construct-update -->

<!-- START:ACTIVE-SYMLINKS -->
### 🔗 Active Symlinks (Auto-Updated)
*Run \`construct-check-symlinks\` to populate*
<!-- END:ACTIVE-SYMLINKS -->

<!-- START:SPRINT-CONTEXT -->
### 🎯 Current Sprint Context (Auto-Updated)
**Date**: [Auto-generated]
**Branch**: $(git branch --show-current 2>/dev/null || echo "unknown")
**Last Commit**: $(git log -1 --oneline 2>/dev/null || echo "No commits yet")

### Current Focus
*Run \`construct-update\` to refresh*
<!-- END:SPRINT-CONTEXT -->

<!-- START:VIOLATIONS -->
### ⚠️ Active Violations (Auto-Updated)
*Run \`construct-check\` to populate*
<!-- END:VIOLATIONS -->

<!-- START:WORKING-LOCATION -->
### 📍 Current Working Location (Auto-Updated)

#### Recently Modified Files
*Run \`construct-update\` to refresh*

#### Git Status
\`\`\`
$(git status --short 2>/dev/null || echo "Not a git repository")
\`\`\`
<!-- END:WORKING-LOCATION -->"
        
        # Add CONSTRUCT-specific sections if this is CONSTRUCT itself
        if [ "$IS_CONSTRUCT" = true ]; then
            context_content="$context_content

<!-- START:DOCUMENTATION-LINKS -->
### 📚 Architecture Documentation (Auto-Updated)
*Run \`construct-arch\` to generate documentation*
<!-- END:DOCUMENTATION-LINKS -->

<!-- START:ACTIVE-PRDS -->
### 📋 Active Product Requirements (Auto-Updated)
*Run \`construct-update\` to refresh PRD tracking*
<!-- END:ACTIVE-PRDS -->"
        fi
        
        base_content="${base_content/\{\{CONSTRUCT:CONTEXT\}\}/$context_content}"
        
        echo "$base_content"
    }
    
    # Function to merge with existing /init content
    merge_with_init_content() {
        local current_content="$1"
        local enhanced_content="$2"
        
        # Extract sections from /init content that should be preserved
        local project_overview=""
        local quick_start=""
        local troubleshooting=""
        local core_principles=""
        
        # Extract Project Overview section if it exists
        if echo "$current_content" | grep -q "^## Project Overview"; then
            project_overview=$(echo "$current_content" | sed -n '/^## Project Overview/,/^##[^#]/p' | sed '$d')
        fi
        
        # Extract Quick Start section if it exists
        if echo "$current_content" | grep -q "^## Quick Start"; then
            quick_start=$(echo "$current_content" | sed -n '/^## Quick Start/,/^##[^#]/p' | sed '$d')
        fi
        
        # Extract Core Development Principles if it exists (from /init)
        if echo "$current_content" | grep -q "^## Core Development Principles"; then
            core_principles=$(echo "$current_content" | sed -n '/^## Core Development Principles/,/^##[^#]/p' | sed '$d')
        fi
        
        # Extract Troubleshooting section if it exists
        if echo "$current_content" | grep -q "^## Troubleshooting"; then
            troubleshooting=$(echo "$current_content" | sed -n '/^## Troubleshooting/,/^##[^#]/p' | sed '$d')
        fi
        
        # Build merged content
        local merged=""
        
        # Start with header and enhancement marker
        merged="<!-- CONSTRUCT Enhanced: $(date -u +"%Y-%m-%d %H:%M:%S UTC") -->

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository."
        
        # Add Project Overview if it exists
        if [ -n "$project_overview" ]; then
            merged="$merged

$project_overview"
        fi
        
        # Add Quick Start if it exists
        if [ -n "$quick_start" ]; then
            merged="$merged

$quick_start"
        fi
        
        # Add Core Development Principles if it exists
        if [ -n "$core_principles" ]; then
            merged="$merged

$core_principles"
        fi
        
        # Extract all pattern-injected content from enhanced version
        # This includes everything between patterns and dynamic sections
        local pattern_section_start=$(echo "$enhanced_content" | grep -n "^## Pattern System" | cut -d: -f1)
        local dynamic_section_start=$(echo "$enhanced_content" | grep -n "^<!-- Dynamic sections" | cut -d: -f1)
        
        if [ -n "$pattern_section_start" ] && [ -n "$dynamic_section_start" ]; then
            # Extract all content between Pattern System and dynamic sections
            local pattern_content=$(echo "$enhanced_content" | sed -n "${pattern_section_start},${dynamic_section_start}p" | sed '$d')
            if [ -n "$pattern_content" ]; then
                merged="$merged

$pattern_content"
            fi
        fi
        
        # Add Troubleshooting if it exists
        if [ -n "$troubleshooting" ]; then
            merged="$merged

$troubleshooting"
        fi
        
        # Add dynamic sections
        local dynamic_sections=$(echo "$enhanced_content" | sed -n '/^<!-- Dynamic sections/,$p')
        if [ -n "$dynamic_sections" ]; then
            merged="$merged

$dynamic_sections"
        fi
        
        echo "$merged"
    }
    
    # Check if CLAUDE.md was created by /init
    INIT_CREATED=false
    if grep -q "## Project Overview" CLAUDE.md && grep -q "## Quick Start" CLAUDE.md; then
        INIT_CREATED=true
        echo -e "${GREEN}✅ Detected /init-created CLAUDE.md${NC}"
    fi
    
    # Create enhanced version
    if [ "$INIT_CREATED" = true ]; then
        # Intelligently merge with /init content
        echo -e "${BLUE}🔄 Merging with /init content...${NC}"
        
        # Process base template
        enhanced_content=$(process_base_template)
        
        # Merge with existing content
        merge_with_init_content "$CURRENT_CONTENT" "$enhanced_content" > CLAUDE.md.enhanced
    else
        # No /init content, use standard processing
        {
            # Add enhancement header
            echo "<!-- CONSTRUCT Enhanced: $(date -u +"%Y-%m-%d %H:%M:%S UTC") -->"
            echo ""
            
            # Process base template with injections
            process_base_template
            
        } > CLAUDE.md.enhanced
    fi
    
    # Replace CLAUDE.md
    mv CLAUDE.md.enhanced CLAUDE.md
    
    echo -e "${GREEN}✅ CLAUDE.md enhanced successfully!${NC}"
fi

# Show next steps
echo ""
echo -e "${BLUE}📋 Next Steps:${NC}"
echo "1. Review the enhanced CLAUDE.md"
echo "2. Run 'construct-update' to refresh dynamic sections"
echo "3. Start developing with pattern guidance!"

if [ "$IS_CONSTRUCT" = true ]; then
    echo ""
    echo -e "${YELLOW}Note: Since this is CONSTRUCT itself, remember to:${NC}"
    echo "- Work in CONSTRUCT-LAB for new features"
    echo "- Test patterns before promoting to CORE"
    echo "- Update documentation as you develop"
fi

exit 0