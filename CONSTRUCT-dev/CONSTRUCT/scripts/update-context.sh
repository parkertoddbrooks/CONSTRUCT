#!/bin/bash

# CONSTRUCT Development Context Updater
# Updates CONSTRUCT-dev/AI/CLAUDE.md with current CONSTRUCT development state

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONSTRUCT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
CONSTRUCT_DEV="$CONSTRUCT_ROOT/CONSTRUCT-dev"
CLAUDE_MD="$CONSTRUCT_DEV/CLAUDE.md"

# Source library functions
source "$CONSTRUCT_DEV/CONSTRUCT/lib/validation.sh"
source "$CONSTRUCT_DEV/CONSTRUCT/lib/file-analysis.sh"
source "$CONSTRUCT_DEV/CONSTRUCT/lib/template-utils.sh"

echo -e "${BLUE}üîÑ Updating CONSTRUCT development context...${NC}"

# Simple approach: append auto-generated section to end of file
generate_auto_update_section() {
    echo -e "${BLUE}üìä Generating CONSTRUCT development status...${NC}"
    
    # Count components
    local script_count=$(find "$CONSTRUCT_DEV" -name "*.sh" -type f | wc -l)
    local lib_functions=$(find "$CONSTRUCT_DEV/CONSTRUCT/lib" -name "*.sh" -type f | wc -l)
    local config_files=$(find "$CONSTRUCT_DEV/CONSTRUCT/config" -name "*.yaml" -type f | wc -l)
    local test_files=$(find "$CONSTRUCT_DEV/tests" -name "*.sh" -type f 2>/dev/null | wc -l)
    
    # Git info
    local current_branch=$(cd "$CONSTRUCT_ROOT" && git branch --show-current 2>/dev/null || echo "unknown")
    local last_commit=$(cd "$CONSTRUCT_ROOT" && git log -1 --oneline 2>/dev/null || echo "No commits")
    local git_status=$(cd "$CONSTRUCT_ROOT" && git status --porcelain 2>/dev/null | head -3 | wc -l || echo "0")
    
    # Template status
    local template_status="‚úÖ Valid"
    if ! validate_template_integrity > /dev/null 2>&1; then
        template_status="‚ùå Issues found"
    fi
    
    # Create the auto-update section
    local temp_dir="${TMPDIR:-/tmp}"
    cat > "$temp_dir/construct_auto_update.md" << EOF

---

# ü§ñ AUTO-GENERATED CONSTRUCT DEVELOPMENT STATUS
**Last Updated**: $(date)
**Generated by**: update-context.sh

## üìä Current State

### Component Counts
- **Shell Scripts**: $script_count
- **Library Functions**: $lib_functions 
- **Configuration Files**: $config_files
- **Test Files**: $test_files

### Git Status
- **Branch**: $current_branch
- **Last Commit**: $last_commit
- **Uncommitted Files**: $git_status

### Template Health
- **Status**: $template_status
- **Location**: PROJECT-TEMPLATE/
- **Integrity**: Run check-architecture.sh for details

## üîß Available Development Tools

### Library Functions (lib/)
- **file-analysis.sh** - Swift MVVM pattern analysis
- **template-utils.sh** - Template management and validation  
- **validation.sh** - Common validation functions

### Configuration (config/)
- **mvvm-rules.yaml** - MVVM validation rules
- **quality-gates.yaml** - Quality thresholds and gates

### Scripts (CONSTRUCT/scripts/)
- **update-context.sh** - This script (updates development context)
- **check-architecture.sh** - Validates CONSTRUCT development patterns
- **before_coding.sh** - Pre-coding guidance and search

## üöÄ Quick Commands

\`\`\`bash
# CONSTRUCT Development Workflow
./CONSTRUCT/scripts/update-context.sh      # Update this context
./CONSTRUCT/scripts/check-architecture.sh  # Validate CONSTRUCT patterns  
./CONSTRUCT/scripts/before_coding.sh func  # Search before creating

# Cross-Environment Analysis (when implemented)
./CONSTRUCT/scripts/analyze-user-project.sh # Analyze USER-project-files
\`\`\`

## üí° Development Patterns

### Shell Script Organization
- Use lib/ for reusable functions
- Follow config/ YAML for validation rules
- Include proper error handling (set -e)
- Add user-friendly colored output

### Dual-Context Approach
- CONSTRUCT development (shell/Python patterns)
- USER project analysis (Swift MVVM patterns)
- Cross-environment insights for improvements

---
*This section auto-updates when you run ./CONSTRUCT/scripts/update-context.sh*

EOF

    # Remove any existing auto-generated section and add new one
    local temp_dir="${TMPDIR:-/tmp}"
    
    # Find and remove everything from the auto-generated marker to end of file
    if grep -q "# ü§ñ AUTO-GENERATED" "$CLAUDE_MD"; then
        # Get line number where auto-generated section starts
        local auto_start=$(grep -n "# ü§ñ AUTO-GENERATED" "$CLAUDE_MD" | head -1 | cut -d: -f1)
        # Keep only content before the auto-generated section
        head -n $((auto_start - 1)) "$CLAUDE_MD" > "$temp_dir/claude_clean.md"
    else
        # No auto-generated section found, copy entire file
        cp "$CLAUDE_MD" "$temp_dir/claude_clean.md"
    fi
    
    # Combine original content with new auto-section
    cat "$temp_dir/claude_clean.md" "$temp_dir/construct_auto_update.md" > "$CLAUDE_MD"
    
    # Cleanup temp files
    rm "$temp_dir/construct_auto_update.md" "$temp_dir/claude_clean.md" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Auto-generated section updated${NC}"
}

# Main execution
main() {
    echo -e "${GREEN}üöÄ Starting CONSTRUCT development context update...${NC}"
    
    # Validate environment
    validate_environment
    
    # Validate CLAUDE.md exists
    if [ ! -f "$CLAUDE_MD" ]; then
        echo -e "${RED}‚ùå CLAUDE.md not found at: $CLAUDE_MD${NC}"
        exit 1
    fi
    
    # Generate auto-update section
    generate_auto_update_section
    
    echo -e "${GREEN}‚úÖ CONSTRUCT development context updated successfully!${NC}"
    echo -e "${BLUE}üìñ View updated context: $CLAUDE_MD${NC}"
    echo ""
    echo "Next steps:"
    echo "  ./CONSTRUCT/scripts/check-architecture.sh   # Validate CONSTRUCT patterns"
    echo "  ./CONSTRUCT/scripts/before_coding.sh func   # Search before coding"
}

# Run main function
main "$@"