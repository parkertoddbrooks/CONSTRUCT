#!/bin/bash

# Construct Pre-Commit Hook
# Enforces architecture standards before allowing commits

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get project root (git root directory)
PROJECT_ROOT=$(git rev-parse --show-toplevel)

echo -e "${BLUE}üèóÔ∏è  Construct Pre-Commit Checks${NC}"
echo "================================"

# Function to run checks
run_check() {
    local check_name=$1
    local check_command=$2
    
    echo -n "Running $check_name... "
    
    if eval "$check_command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC}"
        return 0
    else
        echo -e "${RED}‚ùå${NC}"
        return 1
    fi
}

# Track overall status
CHECKS_PASSED=true

# Run architecture check
if ! run_check "architecture check" "$PROJECT_ROOT/Template/AI/scripts/check-architecture.sh"; then
    CHECKS_PASSED=false
    echo -e "${YELLOW}  Run 'construct-check' to see violations${NC}"
fi

# Check for hardcoded values in staged files
echo -n "Checking staged files for hardcoded values... "
STAGED_SWIFT=$(git diff --cached --name-only --diff-filter=ACM | grep '\.swift$' || true)
if [ -n "$STAGED_SWIFT" ]; then
    HARDCODED=$(echo "$STAGED_SWIFT" | xargs grep -l "frame.*[0-9]\|padding.*[0-9]\|CGFloat.*=.*[0-9]" 2>/dev/null | grep -v "Tokens\|tokens" || true)
    if [ -n "$HARDCODED" ]; then
        echo -e "${RED}‚ùå${NC}"
        echo -e "${YELLOW}  Found hardcoded values in:${NC}"
        echo "$HARDCODED" | sed 's/^/    - /'
        CHECKS_PASSED=false
    else
        echo -e "${GREEN}‚úÖ${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ${NC} (no Swift files staged)"
fi

# Check for business logic in Views
echo -n "Checking for business logic in Views... "
if [ -n "$STAGED_SWIFT" ]; then
    VIEW_FILES=$(echo "$STAGED_SWIFT" | grep "View\.swift$" || true)
    if [ -n "$VIEW_FILES" ]; then
        BUSINESS_LOGIC=$(echo "$VIEW_FILES" | xargs grep -l "URLSession\|await.*Service\|func fetch\|func load\|func save" 2>/dev/null || true)
        if [ -n "$BUSINESS_LOGIC" ]; then
            echo -e "${RED}‚ùå${NC}"
            echo -e "${YELLOW}  Found business logic in Views:${NC}"
            echo "$BUSINESS_LOGIC" | sed 's/^/    - /'
            echo -e "${YELLOW}  Move business logic to ViewModels${NC}"
            CHECKS_PASSED=false
        else
            echo -e "${GREEN}‚úÖ${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ${NC} (no View files staged)"
    fi
else
    echo -e "${GREEN}‚úÖ${NC} (no Swift files staged)"
fi

# Check for @State misuse
echo -n "Checking @State usage... "
if [ -n "$STAGED_SWIFT" ]; then
    STATE_MISUSE=$(echo "$STAGED_SWIFT" | xargs grep -l "@State.*\(User\|Product\|Order\|Customer\|Account\|Item\|Model\)" 2>/dev/null || true)
    if [ -n "$STATE_MISUSE" ]; then
        echo -e "${RED}‚ùå${NC}"
        echo -e "${YELLOW}  @State used for business data in:${NC}"
        echo "$STATE_MISUSE" | sed 's/^/    - /'
        echo -e "${YELLOW}  Use @Published in ViewModel for business data${NC}"
        CHECKS_PASSED=false
    else
        echo -e "${GREEN}‚úÖ${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ${NC} (no Swift files staged)"
fi

# Check commit message format
echo -n "Checking commit message format... "
COMMIT_MSG_FILE=$1
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
    # Check for conventional commit format
    if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC}"
        echo -e "${YELLOW}  Consider using conventional commit format:${NC}"
        echo "    feat: Add new feature"
        echo "    fix: Fix bug"
        echo "    docs: Update documentation"
        echo "    style: Format code"
        echo "    refactor: Refactor code"
        echo "    test: Add tests"
        echo "    chore: Update dependencies"
    fi
fi

# Summary
echo "================================"

if [ "$CHECKS_PASSED" = true ]; then
    echo -e "${GREEN}‚úÖ All checks passed!${NC}"
    echo -e "${GREEN}Trust The Process.${NC}"
    
    # Reminder about session summary
    echo ""
    echo -e "${BLUE}üí° Reminder:${NC}"
    echo "  - Run 'construct-session' if context is getting full"
    echo "  - Create a dev-log for significant changes"
    
    exit 0
else
    echo -e "${RED}‚ùå Some checks failed${NC}"
    echo ""
    echo "Options:"
    echo "1. Fix the issues and try again"
    echo "2. Run 'git commit --no-verify' to bypass (not recommended)"
    echo ""
    echo -e "${YELLOW}Run 'construct-check' for detailed violation report${NC}"
    
    exit 1
fi